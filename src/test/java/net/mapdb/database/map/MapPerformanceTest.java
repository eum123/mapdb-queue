package net.mapdb.database.map;

import lombok.extern.slf4j.Slf4j;
import net.mapdb.database.Database;
import net.mapdb.database.FileDatabase;
import net.mapdb.database.FileDatabaseConfig;
import net.mapdb.database.listener.ExpireListener;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.io.File;

@Slf4j
public class MapPerformanceTest {
    Database<String, String> db;
    boolean isFinish = false;
    int COUNT = 2000;

    @BeforeEach
    public void init() throws Exception {
        new File("./file/sample.db").deleteOnExit();

        FileDatabaseConfig config = FileDatabaseConfig.builder().filePath("./file").fileName("sample.db").build();
        this.db = new FileDatabase(config);

        db.start();
    }

    @Test
    public void insert10000Test() throws Exception {
        MMapConfig config = MMapConfig.builder().mapName("M1").expirationInterval(1).keyType(String.class).valueType(String.class).listener(new ExpireListener() {
            @Override
            public void onExpiration(Object data) {
                log.info("on expiration :" + data);

            }
        }).build();
        MMap<String, String> map = db.getMap(config);

        long start = System.currentTimeMillis();

        for(int i=0 ;i<10000 ;i++) {
            map.put(String.valueOf(i), "0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789");
        }
        long d = System.currentTimeMillis() - start;
        log.info("D:{}, {}", d, (double)10000/ ((double)d/1000));
    }

    @Test
    public void get10000Test() throws Exception {
        MMapConfig config = MMapConfig.builder().mapName("M1").expirationInterval(1).keyType(String.class).valueType(String.class).listener(new ExpireListener() {
            @Override
            public void onExpiration(Object data) {
                log.info("on expiration :" + data);

            }
        }).build();
        MMap<String, String> map = db.getMap(config);

        for(int i=0 ;i<10000 ;i++) {
            map.put(String.valueOf(i), "0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789");
        }

        long start = System.currentTimeMillis();

        for(int i=0 ;i<10000 ;i++) {
            map.get(String.valueOf(i));
        }

        long d = System.currentTimeMillis() - start;
        log.info("D:{}, {}", d, (double)10000/ ((double)d/1000));
    }

    @Test
    public void insert100000Test() throws Exception {
        MMapConfig config = MMapConfig.builder().mapName("M1").expirationInterval(1).keyType(String.class).valueType(String.class).listener(new ExpireListener() {
            @Override
            public void onExpiration(Object data) {
                log.info("on expiration :" + data);

            }
        }).build();
        MMap<String, String> map = db.getMap(config);

        long start = System.currentTimeMillis();

        for(int i=0 ;i<100000 ;i++) {
            map.put(String.valueOf(i), "0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789");
        }
        long d = System.currentTimeMillis() - start;
        log.info("D:{}, {}", d, (double)100000/ ((double)d/1000));
    }

    @AfterEach
    public void destory() throws Exception {
        db.close();

        File f = new File("./file/");
        File[] files = f.listFiles();
        for(File ff : files) {
            ff.deleteOnExit();
        }
    }
}
